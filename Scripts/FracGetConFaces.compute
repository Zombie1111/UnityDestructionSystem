#pragma kernel FindConnectedVertices

StructuredBuffer<float3> worldVers;
StructuredBuffer<int> tris;
RWStructuredBuffer<int> conVers;

uint trisCount;

[numthreads(64, 1, 1)]
void FindConnectedVertices(uint3 id : SV_DispatchThreadID)
{
    int groupSize = 64; // Adjust group size based on your GPU's capabilities

    for (int g = 0; g < trisCount / groupSize; ++g)
    {
        int startIndex = g * groupSize;
        int endIndex = min(startIndex + groupSize, trisCount);

        for (int i = startIndex; i < endIndex; ++i)
        {
            int tI = i * 3; // Assuming each triangle is represented by 3 indices

            // Process each vertex index in the triangle
            for (int j = 0; j < 3; ++j)
            {
                int vertexIndex = tris[tI + j];

                // Perform your logic to find connected vertices
                // and write the result to conVers buffer
                // Example: conVers[vertexIndex] = someValue;
            }
        }

        // Ensure all threads in the group have finished before moving to the next group
        GroupMemoryBarrierWithGroupSync();
    }
}
